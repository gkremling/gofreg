[{"path":"https://gkremling.github.io/gofreg/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 gofreg authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://gkremling.github.io/gofreg/articles/Architecture.html","id":"class-diagram","dir":"Articles","previous_headings":"","what":"Class-diagram","title":"Architecture","text":"Note object-oriented concepts realized via R6-package R6 actually real interface-functionality abstract classes.","code":""},{"path":"https://gkremling.github.io/gofreg/articles/Architecture.html","id":"other-files-and-methods","dir":"Articles","previous_headings":"","what":"Other files and methods","title":"Architecture","text":"loglik_xy() loglik_xzd() resample_param() resample_param_rsmplx() resample_param_cens()","code":""},{"path":"https://gkremling.github.io/gofreg/articles/New-Models.html","id":"the-abstract-base-class-paramregrmodel","dir":"Articles","previous_headings":"","what":"The abstract base class ParamRegrModel","title":"New-Models","text":"Whenever user wants define new model, create R6 class inheriting abstract base class ParamRegrModel. particular, following methods implemented: f_yx() evaluating conditional density function F_yx() evaluating conditional distribution function F1_yx() evaluating conditional quantile function mean_yx() evaluating regression function (ùîº[Y|X=x])(\\mathbb{E}[Y|X=x]) sample_yx() generating sample response variables according conditional distribution fit() handling shape params argument applying fit()-method abstract base class recommended check correct shape params argument five methods . Usually, list() tags corresponding model parameters. Important note: evaluating likelihood function, f_yx (F_yx well case censored data) called argument params plain numeric vector instead list. case minded checks beginning methods.","code":""},{"path":"https://gkremling.github.io/gofreg/articles/New-Models.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"New-Models","text":"following example, define new model form (Y|X)‚àºùí©(Œº(X),œÉ(X))(Y|X) \\sim \\mathcal{N}(\\mu(X), \\sigma(X)) Œº(X)=+ebTx\\mu(X) = + e^{b^T x} œÉ(X)=cTx2\\sigma(X) = c^T x^2 (squaring performed element-wise). Now, let us generate data following new model. Fitting model generated data yield good estimates model parameters. , goodness--fit test reject (correct) model, .e. yield rather high p-value.","code":"CustomModel <- R6::R6Class(   classname = \"CustomModel\",   inherit = ParamRegrModel,   public = list(          f_yx = function(t, x, params = private$params) {       if (checkmate::test_atomic_vector(params)) {         # reshape plain numeric vector into list with appropriate tags         xcol <- ncol(as.matrix(x))         checkmate::assert_atomic_vector(params, len = 1 + 2 * xcol)         params <- list(a = params[1],                         b = params[2:(1+xcol)],                         c = params[(2+xcol):(1+2*xcol)])       } else {         private$check_params(params, x)       }       dnorm(t, mean = self$mean_yx(x, params),                 sd = as.matrix(x)^2 %*% params$c)     },          F_yx = function(t, x, params = private$params) {       if (checkmate::test_atomic_vector(params)) {         # reshape plain numeric vector into list with appropriate tags         xcol <- ncol(as.matrix(x))         checkmate::assert_atomic_vector(params, len = 1 + 2 * xcol)         params <- list(a = params[1],                         b = params[2:(1+xcol)],                         c = params[(2+xcol):(1+2*xcol)])       } else {         private$check_params(params, x)       }       pnorm(t, mean = self$mean_yx(x, params),                 sd = as.matrix(x)^2 %*% params$c)     },          F1_yx = function(t, x, params = private$params) {       private$check_params(params, x)       qnorm(t, mean = self$mean_yx(x, params),                 sd = as.matrix(x)^2 %*% params$c)     },          sample_yx = function(x, params = private$params) {       private$check_params(params, x)       rnorm(nrow(as.matrix(x)), mean = self$mean_yx(x, params),                                  sd = as.matrix(x)^2 %*% params$c)     },          mean_yx = function(x, params = private$params) {       private$check_params(params, x)       params$a + exp(as.matrix(x) %*% params$b)     },          fit = function(data, params_init = private$params, loglik = loglik_xy, inplace = FALSE) {       checkmate::assert_names(names(data), must.include = c(\"x\"))       private$check_params(params_init, data$x)       params_opt <- super$fit(data, params_init = unlist(params_init, use.names = FALSE),                                      loglik = loglik)       xcol <- ncol(as.matrix(x))       params_opt <-list(a = params_opt[1],                          b = params_opt[2:(1+xcol)],                          c = params_opt[(2+xcol):(1+2*xcol)])       if (inplace) {         private$params <- params_opt         invisible(self)       } else {         params_opt       }     }   ),      private = list(     check_params = function(params, x) {       checkmate::assert_list(params, len = 3)       checkmate::assert_names(names(params), identical.to = c(\"a\", \"b\", \"c\"))       checkmate::assert_vector(params$b, len = ncol(as.matrix(x)))       checkmate::assert_vector(params$c, len = ncol(as.matrix(x)))     }   ) ) set.seed(123) n  <- 100 x <- cbind(rnorm(n), runif(n)) model <- CustomModel$new() params_true <- list(a = 0.8, b = c(0.5, 0.7), c = c(0.1, 0.2)) y <- model$sample_yx(x, params_true) data <- dplyr::tibble(x = x, y = y) head(data) #> # A tibble: 6 √ó 2 #>     x[,1]  [,2]     y #>     <dbl> <dbl> <dbl> #> 1 -0.560  0.239  1.73 #> 2 -0.230  0.962  2.69 #> 3  1.56   0.601  4.23 #> 4  0.0705 0.515  2.23 #> 5  0.129  0.403  2.21 #> 6  1.72   0.880  5.04 model$fit(data, params_init = list(a = 1, b = c(1,1), c = c(1,1)), inplace = TRUE) model$get_params() #> $a #> [1] 0.8015445 #>  #> $b #> [1] 0.4956839 0.7074226 #>  #> $c #> [1] 0.07651354 0.21522819 gt <- GOFTest$new(data = data, model_fitted = model, test_stat = CondKolmY$new(), nboot = 100) gt$get_pvalue() #> [1] 0.33"},{"path":"https://gkremling.github.io/gofreg/articles/New-TestStatistics.html","id":"the-abstract-base-class-teststatistic","dir":"Articles","previous_headings":"","what":"The abstract base class TestStatistic","title":"New-TestStatistics","text":"Whenever user wants define new test statistic, create R6 class inheriting abstract base class TestStatistic implementing method calc_stat(). Given data model test , method calculates value test statistic well two vectors (plot.x plot.y) can used plot corresponding process.","code":""},{"path":"https://gkremling.github.io/gofreg/articles/New-TestStatistics.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"New-TestStatistics","text":"following example, define new test statistic, specifically marked empirical process (MEP) defined Stute (1997). given Rn1(x)=n‚àí1/2‚àë=1n1{Xi‚â§x}(Yi‚àím(Xi,œëÃÇn)),R_n^1(x) = n^{-1/2} \\sum_{=1}^n 1_{\\{X_i \\le x\\}} (Y_i - m(X_i, \\hat{\\vartheta}_n)), m(x,œë)m(x, \\vartheta) denotes regression function corresponding given model parameter œë\\vartheta. order able plot process two-dimensional grid, assume covariates XX one-dimensional. Now, let us create artificial dataset use test statistic . evaluate goodness--fit test using new test statistic, fit two different models data: correct model (using x^2) wrong model (using x). expected, p-value wrong model low, get rejected. visualize results, can plot process corresponding given data together bootstrap processes.  Now, let us consider correct model covariates X2X^2. p-value correct model rather high thus accepted. can plot corresponding processes.","code":"MEP_Stute97 <- R6::R6Class(   classname = \"MEP_Stute97\",   inherit = TestStatistic,   public = list(     calc_stat = function(data, model) {       # check for correct shape of data and definedness of model params       checkmate::assert_data_frame(data)       checkmate::assert_names(names(data), must.include = c(\"x\", \"y\"))       checkmate::assert_matrix(as.matrix(x), ncols = 1)       checkmate::assert_class(model, \"ParamRegrModel\")       params <- model$get_params()       if (anyNA(params)) {         stop(\"Model first needs to be fitted to the data.\")       }              # compute residuals and order them according to X       res <- data$y - model$mean_yx(data$x)       ord.id <- order(c(data$x))       res.ord <- res[ord.id]              # compute MEP (cumulative sum of the ordered residuals)       proc <- cumsum(res.ord) / sqrt(n)        # set private fields accordingly       private$value <- max(abs(proc))       private$plot.x <- c(data$x)[ord.id]       private$plot.y <- proc       invisible(self)     }   ) ) set.seed(123) n  <- 100 x <- rnorm(n) model <- NormalGLM$new() params_true <- list(beta = 3, sd = 0.5) y <- model$sample_yx(x^2, params_true) data <- dplyr::tibble(x = x, y = y) head(data) #> # A tibble: 6 √ó 2 #>         x      y #>     <dbl>  <dbl> #> 1 -0.560   0.587 #> 2 -0.230   0.287 #> 3  1.56    7.17  #> 4  0.0705 -0.159 #> 5  0.129  -0.426 #> 6  1.72    8.80 model$fit(data, params_init = list(beta = 1, sd = 5), inplace = TRUE) model$get_params() #> $beta #> [1] 0.9404959 #>  #> $sd #> [1] 4.094303 gt <- GOFTest$new(data = data, model_fitted = model, test_stat = MEP_Stute97$new(), nboot = 100) gt$get_pvalue() #> [1] 0 gt$plot_procs() data_x2 <- tibble::tibble(x = data$x^2, y = data$y) model$fit(data_x2, params_init = list(beta = 1, sd = 5), inplace = TRUE) model$get_params() #> $beta #> [1] 2.946964 #>  #> $sd #> [1] 0.4783823 gt <- GOFTest$new(data = data_x2, model_fitted = model, test_stat = MEP_Stute97$new(), nboot = 100) gt$get_pvalue() #> [1] 0.95 gt$plot_procs()"},{"path":"https://gkremling.github.io/gofreg/articles/gofreg.html","id":"typical-usage","dir":"Articles","previous_headings":"","what":"Typical usage","title":"The gofreg package: Perform goodness-of-fit tests for parametric regression","text":"Generate load dataset Fit parametric regression model given data Compute p-value fitted model using one available test statistics","code":""},{"path":"https://gkremling.github.io/gofreg/articles/gofreg.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"The gofreg package: Perform goodness-of-fit tests for parametric regression","text":"example, fit generalized linear model (GLM) artificially created dataset. consists two covariates, one normally one uniformly distributed, response variable following classical linear model normal distribution. First, fit correct model data. parameters estimates close true values. assess whether fitted model fits given data, perform bootstrap-based goodness--fit test using conditional Kolmogorov test statistic marginal distribution Y. expect, p-value rather high, model rejected. Next, fit wrong model data. particular, exclude second covariate. can seen variance estimated rather high reasonable includes part variance explained taking second covariate account. corresponding p-value computed following code chunk. p-value low, model hypothesis rejected. test reveals mistake model assumption. investigate discrepancy, look plots processes underlying test statistic.  can seen original process (red line) behaves differently bootstrap versions (gray lines). comparison purposes, also plot processes case correct model fitted.  time, original process (red line) behaves similar bootrap versions (gray lines). show extreme behavior.","code":"set.seed(123) n  <- 100 x <- cbind(rnorm(n, mean = 3), runif(n, min = 1, max = 10)) model_true <- GLM.new(distr = \"normal\", linkinv = identity) params_true <- list(beta = c(2, 6), sd = 1) y <- model_true$sample_yx(x, params_true) data <- dplyr::tibble(x = x, y = y) model_test <- GLM.new(distr = \"normal\", linkinv = identity) model_test$fit(data, params_init = list(beta = c(1,1), sd = 5), inplace = TRUE) print(model_test$get_params()) #> $beta #> [1] 1.950653 6.027008 #>  #> $sd #> [1] 0.9268118 gt <- GOFTest$new(data = data, model_fitted = model_test,                    test_stat = CondKolmY$new(), nboot = 100) print(gt$get_pvalue()) #> [1] 0.46 model_test <- GLM.new(distr = \"normal\", linkinv = identity) data_miss <- tibble::tibble(x = data$x[,1], y = data$y) model_test$fit(data_miss, params_init = list(beta = c(2), sd = 2),                 inplace = TRUE) print(model_test$get_params()) #> $beta #> [1] 11.68109 #>  #> $sd #> [1] 17.91058 gt2 <- GOFTest$new(data = data_miss, model_fitted = model_test,                    test_stat = CondKolmY$new(), nboot = 100) print(gt2$get_pvalue()) #> [1] 0.01 gt2$plot_procs() gt$plot_procs()"},{"path":"https://gkremling.github.io/gofreg/articles/gofreg.html","id":"parametric-regression-models","dir":"Articles","previous_headings":"","what":"Parametric Regression Models","title":"The gofreg package: Perform goodness-of-fit tests for parametric regression","text":"list parametric regression models available gofreg package: NormalGLM: Generalized linear model normal distribution GammaGLM: Generalized linear model gamma distribution ExpGLM: Generalized linear model exponential distribution WeibullGLM: Generalized linear model Weibull distribution NegBinomGLM: Generalized linear model negative binomial distribution package also offers option use user-defined models. instructions implement new models see vignette(\"New-Models\").","code":""},{"path":"https://gkremling.github.io/gofreg/articles/gofreg.html","id":"test-statistics","dir":"Articles","previous_headings":"","what":"Test Statistics","title":"The gofreg package: Perform goodness-of-fit tests for parametric regression","text":"list test statistics available gofreg package: CondKolmXY: Conditional Kolmogorov joint distribution (X,Y)(X,Y) defined Andrews (1997) doi:10.2307/2171880 SICM: Simulated integrated conditional moment test defined Bierens & Wang (2012) doi:10.1017/S0266466611000168 MEP: Marked Empirical Process defined Dikta & Scheer (2021) doi:10.1007/978-3-030-73480-0 CondKolmY: Conditional Kolmogorov marginal distribution YY defined Kremling & Dikta (2024) arXiv:2409.20262 package also offers option use user-defined test statistics. instructions implement new test statistics see vignette(\"New-TestStatistics\").","code":""},{"path":"https://gkremling.github.io/gofreg/articles/gofreg.html","id":"censored-data","dir":"Articles","previous_headings":"","what":"Censored data","title":"The gofreg package: Perform goodness-of-fit tests for parametric regression","text":"package can also used fit parametric regression models perform goodnes--fit tests randmly right-censored survival times YY. case, loglik resample arguments ParamRegrModel$fit() GOFTest$new() methods specified. Moreover, data object needs data.frame() tags ‚Äúx‚Äù, ‚Äúz‚Äù ‚Äúdelta‚Äù XX representing covariates, Z=min(Y,C)Z = \\min(Y, C) censored times Œ¥=1{Y‚â§C}\\delta = 1_{\\{Y \\le C\\}} censoring indicators. test statistic censored setting given CondKolmY_RCM. example artificial data generated normal GLM normally distributed censoring times. can seen estimated parameters close true parameters Œ≤=(2,3)\\beta = (2,3) œÉ=1\\sigma = 1. Now, compute corresponding p-value using Conditional Kolmogorov test statistic marginal distribution YY random censorship. p-value rather high model rejected expected since fitted correct model.","code":"n <- 100 x <- cbind(runif(n), rbinom(n, 1, 0.5)) model <- NormalGLM$new() y <- model$sample_yx(x, params = list(beta = c(2, 3), sd = 1)) c <- rnorm(n, mean(y) * 1.2, sd(y) * 0.5) data <- dplyr::tibble(x = x, z = pmin(y, c), delta = as.numeric(y <= c))  model$fit(data, params_init = list(beta = c(1, 1), sd = 3), inplace = TRUE,            loglik = loglik_xzd) print(model$get_params()) #> $beta #> [1] 2.090486 2.867202 #>  #> $sd #> [1] 0.965581 gt <- GOFTest$new(   data = data, model_fitted = model, test_stat = CondKolmY_RCM$new(),    nboot = 100, resample = resample_param_cens, loglik = loglik_xzd ) print(gt$get_pvalue()) #> [1] 0.46"},{"path":"https://gkremling.github.io/gofreg/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gitte Kremling. Author, maintainer, copyright holder.","code":""},{"path":"https://gkremling.github.io/gofreg/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kremling G (2024). gofreg: Bootstrap-Based Goodness--Fit Tests Parametric Regression. R package version 1.0.0, https://gkremling.github.io/gofreg/, https://github.com/gkremling/gofreg.","code":"@Manual{,   title = {gofreg: Bootstrap-Based Goodness-of-Fit Tests for Parametric Regression},   author = {Gitte Kremling},   year = {2024},   note = {R package version 1.0.0, https://gkremling.github.io/gofreg/},   url = {https://github.com/gkremling/gofreg}, }"},{"path":"https://gkremling.github.io/gofreg/index.html","id":"gofreg","dir":"","previous_headings":"","what":"Bootstrap-Based Goodness-of-Fit Tests for Parametric Regression","title":"Bootstrap-Based Goodness-of-Fit Tests for Parametric Regression","text":"R package provides classes methods fit parametric regression models given data perform bootstrap-based goodness--fit tests using different test statistics. data can either consist (X,Y)(X,Y) pairs covariates response variables case random censorship consists tuples (X,Z,Œ¥)(X, Z, \\delta) denoting covariates, censored survival times censoring indicators. package includes different parametric regression models (mostly generalized linear models) test statistics (based different papers). can easily extended user-defined models test statistics.","code":""},{"path":"https://gkremling.github.io/gofreg/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bootstrap-Based Goodness-of-Fit Tests for Parametric Regression","text":"can install CRAN github","code":"install.packages(\"gofreg\") devtools::install_github(\"gkremling/gofreg\")"},{"path":"https://gkremling.github.io/gofreg/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Bootstrap-Based Goodness-of-Fit Tests for Parametric Regression","text":"basic example shows fit parametric regression model given dataset afterwards perform goodness--fit test. example, use dataset datasets::cars, generalized linear model normal distribution conditional Kolmogorov test statistic marginal distribution YY defined Kremling & Dikta (2024) arXiv:2409.20262.","code":"library(gofreg)  set.seed(123)  data <- dplyr::tibble(x = datasets::cars$speed, y = datasets::cars$dist) model <- GLM.new(distr = \"normal\", linkinv = identity) model$fit(data, params_init = list(beta = 3, sd = 2), inplace = TRUE) print(model$get_params()) #> $beta #> [1] 2.908838 #>  #> $sd #> [1] 16.09429 gt <- GOFTest$new(data = data, model_fitted = model, test_stat = CondKolmY$new(), nboot = 100) print(gt$get_pvalue()) #> [1] 0.01 gt$plot_procs()"},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmXY.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Kolmogorov test statistic for the joint distribution of (X,Y) ‚Äî CondKolmXY","title":"Conditional Kolmogorov test statistic for the joint distribution of (X,Y) ‚Äî CondKolmXY","text":"class inherits TestStatistic implements function calculate test statistic (x-y-values can used plot underlying process). process underlying test statistic given Andrews (1997) doi:10.2307/2171880  defined $$\\nu_n(x,y) = \\frac{1}{\\sqrt{n}}   \\sum_{=1}^n \\left(I_{\\{Y_i \\le y\\}} - F(y|\\hat{\\vartheta}_n, X_i) \\right)   I_{\\{X_i \\le x\\}},\\quad (x,y) \\R^{p+1}.$$","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmXY.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Conditional Kolmogorov test statistic for the joint distribution of (X,Y) ‚Äî CondKolmXY","text":"gofreg::TestStatistic -> CondKolmXY","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmXY.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Conditional Kolmogorov test statistic for the joint distribution of (X,Y) ‚Äî CondKolmXY","text":"gofreg::TestStatistic$geom_ts_proc() gofreg::TestStatistic$get_plot_xy() gofreg::TestStatistic$get_value() gofreg::TestStatistic$plot() gofreg::TestStatistic$print()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmXY.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Conditional Kolmogorov test statistic for the joint distribution of (X,Y) ‚Äî CondKolmXY","text":"CondKolmXY$calc_stat() CondKolmXY$clone()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmXY.html","id":"method-calc-stat-","dir":"Reference","previous_headings":"","what":"Method calc_stat()","title":"Conditional Kolmogorov test statistic for the joint distribution of (X,Y) ‚Äî CondKolmXY","text":"Calculate value test statistic given data model test .","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmXY.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Kolmogorov test statistic for the joint distribution of (X,Y) ‚Äî CondKolmXY","text":"","code":"CondKolmXY$calc_stat(data, model)"},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmXY.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Kolmogorov test statistic for the joint distribution of (X,Y) ‚Äî CondKolmXY","text":"data data.frame() columns x y containing data model ParamRegrModel test , already fitted data","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmXY.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Conditional Kolmogorov test statistic for the joint distribution of (X,Y) ‚Äî CondKolmXY","text":"modified object (self), allowing method chaining.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmXY.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Conditional Kolmogorov test statistic for the joint distribution of (X,Y) ‚Äî CondKolmXY","text":"objects class cloneable method.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmXY.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Kolmogorov test statistic for the joint distribution of (X,Y) ‚Äî CondKolmXY","text":"","code":"CondKolmXY$clone(deep = FALSE)"},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmXY.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Kolmogorov test statistic for the joint distribution of (X,Y) ‚Äî CondKolmXY","text":"deep Whether make deep clone.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmXY.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional Kolmogorov test statistic for the joint distribution of (X,Y) ‚Äî CondKolmXY","text":"","code":"# Create an example dataset n <- 100 x <- cbind(runif(n), rbinom(n, 1, 0.5)) model <- NormalGLM$new() y <- model$sample_yx(x, params=list(beta=c(2,3), sd=1)) data <- dplyr::tibble(x = x, y = y)  # Fit the correct model model$fit(data, params_init=list(beta=c(1,1), sd=3), inplace = TRUE)  # Print value of test statistic and plot corresponding process ts <- CondKolmXY$new() ts$calc_stat(data, model) print(ts) #> Test statistic with value 0.3495807 plot(ts)   # Fit a wrong model model2 <- NormalGLM$new(linkinv = function(u) {u+10}) model2$fit(data, params_init=list(beta=c(1,1), sd=3), inplace = TRUE)  # Print value of test statistic and plot corresponding process ts2 <- CondKolmXY$new() ts2$calc_stat(data, model2) print(ts2) #> Test statistic with value 3.791774 plot(ts2)"},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmY.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Kolmogorov test statistic for the marginal distribution of Y ‚Äî CondKolmY","title":"Conditional Kolmogorov test statistic for the marginal distribution of Y ‚Äî CondKolmY","text":"class inherits TestStatistic implements function calculate test statistic (x-y-values can used plot underlying process). process underlying test statistic given Kremling & Dikta (2024) https://arxiv.org/abs/2409.20262 defined $$\\tilde{\\alpha}_n(t) = \\frac{1}{\\sqrt{n}}   \\sum_{=1}^n \\left( I_{\\{Y_i \\le t\\}} - F(t|\\hat{\\vartheta}_n, X_i)   \\right), \\quad -\\infty \\le t \\le \\infty.$$","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmY.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Conditional Kolmogorov test statistic for the marginal distribution of Y ‚Äî CondKolmY","text":"gofreg::TestStatistic -> CondKolmY","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmY.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Conditional Kolmogorov test statistic for the marginal distribution of Y ‚Äî CondKolmY","text":"gofreg::TestStatistic$geom_ts_proc() gofreg::TestStatistic$get_plot_xy() gofreg::TestStatistic$get_value() gofreg::TestStatistic$plot() gofreg::TestStatistic$print()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmY.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Conditional Kolmogorov test statistic for the marginal distribution of Y ‚Äî CondKolmY","text":"CondKolmY$calc_stat() CondKolmY$clone()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmY.html","id":"method-calc-stat-","dir":"Reference","previous_headings":"","what":"Method calc_stat()","title":"Conditional Kolmogorov test statistic for the marginal distribution of Y ‚Äî CondKolmY","text":"Calculate value test statistic given data model test .","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmY.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Kolmogorov test statistic for the marginal distribution of Y ‚Äî CondKolmY","text":"","code":"CondKolmY$calc_stat(data, model)"},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmY.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Kolmogorov test statistic for the marginal distribution of Y ‚Äî CondKolmY","text":"data data.frame() columns x y containing data model ParamRegrModel test , already fitted data","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmY.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Conditional Kolmogorov test statistic for the marginal distribution of Y ‚Äî CondKolmY","text":"modified object (self), allowing method chaining.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmY.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Conditional Kolmogorov test statistic for the marginal distribution of Y ‚Äî CondKolmY","text":"objects class cloneable method.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmY.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Kolmogorov test statistic for the marginal distribution of Y ‚Äî CondKolmY","text":"","code":"CondKolmY$clone(deep = FALSE)"},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmY.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Kolmogorov test statistic for the marginal distribution of Y ‚Äî CondKolmY","text":"deep Whether make deep clone.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmY.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional Kolmogorov test statistic for the marginal distribution of Y ‚Äî CondKolmY","text":"","code":"# Create an example dataset n <- 100 x <- cbind(runif(n), rbinom(n, 1, 0.5)) model <- NormalGLM$new() y <- model$sample_yx(x, params=list(beta=c(2,3), sd=1)) data <- dplyr::tibble(x = x, y = y)  # Fit the correct model model$fit(data, params_init=list(beta=c(1,1), sd=3), inplace = TRUE)  # Print value of test statistic and plot corresponding process ts <- CondKolmY$new() ts$calc_stat(data, model) print(ts) #> Test statistic with value 0.5057936 plot(ts)   # Fit a wrong model model2 <- NormalGLM$new(linkinv = function(u) {u+10}) model2$fit(data, params_init=list(beta=c(1,1), sd=3), inplace = TRUE)  # Print value of test statistic and plot corresponding process ts2 <- CondKolmY$new() ts2$calc_stat(data, model2) print(ts2) #> Test statistic with value 4.151777 plot(ts2)"},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmY_RCM.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Kolmogorov test statistic for the marginal distribution of Y under random censorship ‚Äî CondKolmY_RCM","title":"Conditional Kolmogorov test statistic for the marginal distribution of Y under random censorship ‚Äî CondKolmY_RCM","text":"class inherits TestStatistic implements function calculate test statistic (x-y-values can used plot underlying process). process underlying test statistic defined $$\\tilde{\\alpha}_n^{KM}(t) = \\sqrt{n} \\left( \\hat{F}^{KM}_n(t) -   \\frac{1}{n} \\sum_{=1}^n F(t|\\hat{\\vartheta}_n, X_i) \\right), \\quad   -\\infty \\le t \\le \\infty.$$","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmY_RCM.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Conditional Kolmogorov test statistic for the marginal distribution of Y under random censorship ‚Äî CondKolmY_RCM","text":"gofreg::TestStatistic -> CondKolmY_RCM","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmY_RCM.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Conditional Kolmogorov test statistic for the marginal distribution of Y under random censorship ‚Äî CondKolmY_RCM","text":"gofreg::TestStatistic$geom_ts_proc() gofreg::TestStatistic$get_plot_xy() gofreg::TestStatistic$get_value() gofreg::TestStatistic$plot() gofreg::TestStatistic$print()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmY_RCM.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Conditional Kolmogorov test statistic for the marginal distribution of Y under random censorship ‚Äî CondKolmY_RCM","text":"CondKolmY_RCM$calc_stat() CondKolmY_RCM$clone()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmY_RCM.html","id":"method-calc-stat-","dir":"Reference","previous_headings":"","what":"Method calc_stat()","title":"Conditional Kolmogorov test statistic for the marginal distribution of Y under random censorship ‚Äî CondKolmY_RCM","text":"Calculate value test statistic given data model test .","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmY_RCM.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Kolmogorov test statistic for the marginal distribution of Y under random censorship ‚Äî CondKolmY_RCM","text":"","code":"CondKolmY_RCM$calc_stat(data, model)"},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmY_RCM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Kolmogorov test statistic for the marginal distribution of Y under random censorship ‚Äî CondKolmY_RCM","text":"data data.frame() columns x y containing data model ParamRegrModel test , already fitted data","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmY_RCM.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Conditional Kolmogorov test statistic for the marginal distribution of Y under random censorship ‚Äî CondKolmY_RCM","text":"modified object (self), allowing method chaining.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmY_RCM.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Conditional Kolmogorov test statistic for the marginal distribution of Y under random censorship ‚Äî CondKolmY_RCM","text":"objects class cloneable method.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmY_RCM.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Kolmogorov test statistic for the marginal distribution of Y under random censorship ‚Äî CondKolmY_RCM","text":"","code":"CondKolmY_RCM$clone(deep = FALSE)"},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmY_RCM.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Kolmogorov test statistic for the marginal distribution of Y under random censorship ‚Äî CondKolmY_RCM","text":"deep Whether make deep clone.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmY_RCM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional Kolmogorov test statistic for the marginal distribution of Y under random censorship ‚Äî CondKolmY_RCM","text":"","code":"# Create an example dataset n <- 100 x <- cbind(runif(n), rbinom(n, 1, 0.5)) model <- NormalGLM$new() y <- model$sample_yx(x, params=list(beta=c(2,3), sd=1)) c <- rnorm(n, mean(y)*1.2, sd(y)*0.5) data <- dplyr::tibble(x = x, z = pmin(y,c), delta = as.numeric(y <= c))  # Fit the correct model model$fit(data, params_init=list(beta=c(1,1), sd=3), inplace = TRUE, loglik = loglik_xzd)  # Print value of test statistic and plot corresponding process ts <- CondKolmY_RCM$new() ts$calc_stat(data, model) print(ts) #> Test statistic with value 0.8832506 plot(ts)   # Fit a wrong model model2 <- NormalGLM$new(linkinv = function(u) {u+10}) model2$fit(data, params_init=list(beta=c(1,1), sd=3), inplace = TRUE, loglik = loglik_xzd)  # Print value of test statistic and plot corresponding process ts2 <- CondKolmY_RCM$new() ts2$calc_stat(data, model2) print(ts2) #> Test statistic with value 4.557321 plot(ts2)"},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmbXY.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Kolmogorov test statistic for the joint distribution of (beta^T X,Y) ‚Äî CondKolmbXY","title":"Conditional Kolmogorov test statistic for the joint distribution of (beta^T X,Y) ‚Äî CondKolmbXY","text":"class inherits TestStatistic implements function calculate test statistic (x-y-values can used plot underlying process). process underlying test statistic defined $$\\bar{\\alpha}_n(s,t) = \\frac{1}{\\sqrt{n}} \\sum_{=1}^n   \\left( I_{\\{Y_i \\le t\\}} - F(t|\\hat{\\vartheta}_n, X_i) \\right)   I_{\\{\\hat{\\beta}_n^T X_i \\le s\\}}, \\quad (s,t) \\R^{2}.$$","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmbXY.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Conditional Kolmogorov test statistic for the joint distribution of (beta^T X,Y) ‚Äî CondKolmbXY","text":"gofreg::TestStatistic -> CondKolmbXY","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmbXY.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Conditional Kolmogorov test statistic for the joint distribution of (beta^T X,Y) ‚Äî CondKolmbXY","text":"gofreg::TestStatistic$geom_ts_proc() gofreg::TestStatistic$get_plot_xy() gofreg::TestStatistic$get_value() gofreg::TestStatistic$plot() gofreg::TestStatistic$print()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmbXY.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Conditional Kolmogorov test statistic for the joint distribution of (beta^T X,Y) ‚Äî CondKolmbXY","text":"CondKolmbXY$calc_stat() CondKolmbXY$clone()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmbXY.html","id":"method-calc-stat-","dir":"Reference","previous_headings":"","what":"Method calc_stat()","title":"Conditional Kolmogorov test statistic for the joint distribution of (beta^T X,Y) ‚Äî CondKolmbXY","text":"Calculate value test statistic given data model test .","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmbXY.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Kolmogorov test statistic for the joint distribution of (beta^T X,Y) ‚Äî CondKolmbXY","text":"","code":"CondKolmbXY$calc_stat(data, model)"},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmbXY.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Kolmogorov test statistic for the joint distribution of (beta^T X,Y) ‚Äî CondKolmbXY","text":"data data.frame() columns x y containing data model ParamRegrModel test , already fitted data","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmbXY.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Conditional Kolmogorov test statistic for the joint distribution of (beta^T X,Y) ‚Äî CondKolmbXY","text":"modified object (self), allowing method chaining.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmbXY.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Conditional Kolmogorov test statistic for the joint distribution of (beta^T X,Y) ‚Äî CondKolmbXY","text":"objects class cloneable method.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmbXY.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Kolmogorov test statistic for the joint distribution of (beta^T X,Y) ‚Äî CondKolmbXY","text":"","code":"CondKolmbXY$clone(deep = FALSE)"},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmbXY.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Kolmogorov test statistic for the joint distribution of (beta^T X,Y) ‚Äî CondKolmbXY","text":"deep Whether make deep clone.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/CondKolmbXY.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional Kolmogorov test statistic for the joint distribution of (beta^T X,Y) ‚Äî CondKolmbXY","text":"","code":"# Create an example dataset n <- 100 x <- cbind(runif(n), rbinom(n, 1, 0.5)) model <- NormalGLM$new() y <- model$sample_yx(x, params=list(beta=c(2,3), sd=1)) data <- dplyr::tibble(x = x, y = y)  # Fit the correct model model$fit(data, params_init=list(beta=c(1,1), sd=3), inplace = TRUE)  # Print value of test statistic and plot corresponding process ts <- CondKolmbXY$new() ts$calc_stat(data, model) print(ts) #> Test statistic with value 0.557349 plot(ts)   # Fit a wrong model model2 <- NormalGLM$new(linkinv = function(u) {u+10}) model2$fit(data, params_init=list(beta=c(1,1), sd=3), inplace = TRUE)  # Print value of test statistic and plot corresponding process ts2 <- CondKolmbXY$new() ts2$calc_stat(data, model2) print(ts2) #> Test statistic with value 2.716021 plot(ts2)"},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized linear model with exponential distribution ‚Äî ExpGLM","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"class represents generalized linear model exponential distribution. inherits GLM implements functions , example, evaluate conditional density distribution functions.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"gofreg::ParamRegrModel -> gofreg::GLM -> ExpGLM","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"gofreg::ParamRegrModel$get_params() gofreg::ParamRegrModel$set_params() gofreg::GLM$initialize() gofreg::GLM$mean_yx()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"ExpGLM$fit() ExpGLM$f_yx() ExpGLM$F_yx() ExpGLM$F1_yx() ExpGLM$sample_yx() ExpGLM$clone()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":"method-fit-","dir":"Reference","previous_headings":"","what":"Method fit()","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"Calculates maximum likelihood estimator model parameters based given data.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"","code":"ExpGLM$fit(   data,   params_init = private$params,   loglik = loglik_xy,   inplace = FALSE )"},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"data tibble containing data fit model params_init initial value model parameters use optimization (defaults fitted parameter values) loglik function(data, model, params) defaults loglik_xy() inplace logical; TRUE, default model parameters set accordingly parameter estimator returned","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"MLE model parameters given data, shape params_init","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":"method-f-yx-","dir":"Reference","previous_headings":"","what":"Method f_yx()","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"Evaluates conditional density function.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"","code":"ExpGLM$f_yx(t, x, params = private$params)"},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"t value(s) conditional density shall evaluated x matrix covariates, row representing one sample params model parameters use (list() tag beta), defaults fitted parameter values","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"value(s) conditional density function, shape t","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":"method-f-yx--1","dir":"Reference","previous_headings":"","what":"Method F_yx()","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"Evaluates conditional distribution function.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"","code":"ExpGLM$F_yx(t, x, params = private$params)"},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"t value(s) conditional distribution shall evaluated x matrix covariates, row representing one sample params model parameters use (list() tag beta), defaults fitted parameter values","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"value(s) conditional distribution function,  shape t","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":"method-f-yx--2","dir":"Reference","previous_headings":"","what":"Method F1_yx()","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"Evaluates conditional quantile function.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"","code":"ExpGLM$F1_yx(t, x, params = private$params)"},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"t value(s) conditional quantile function shall evaluated x matrix covariates, row representing one sample params model parameters use (list() tag beta), defaults fitted parameter values","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"value(s) conditional quantile function, shape t","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":"method-sample-yx-","dir":"Reference","previous_headings":"","what":"Method sample_yx()","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"Generates new sample response variables conditional distribution.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"","code":"ExpGLM$sample_yx(x, params = private$params)"},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"x matrix covariates, row representing one sample params model parameters use (list() tag beta), defaults fitted parameter values","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"vector sampled response variables, length nrow(x)","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"objects class cloneable method.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"","code":"ExpGLM$clone(deep = FALSE)"},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"deep Whether make deep clone.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ExpGLM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized linear model with exponential distribution ‚Äî ExpGLM","text":"","code":"# Use the built-in cars dataset x <- datasets::cars$speed y <- datasets::cars$dist data <- dplyr::tibble(x=x, y=y)  # Create an instance of ExpGLM model <- ExpGLM$new()  # Fit an Exponential GLM to the cars dataset model$fit(data, params_init = list(beta=3), inplace=TRUE) params_opt <- model$get_params()  # Plot the resulting regression function plot(datasets::cars) abline(a = 0, b = params_opt$beta)  # Generate a sample for y for given x following the same distribution x.new <- seq(min(x), max(x), by=2) y.smpl <- model$sample_yx(x.new) points(x.new, y.smpl, col=\"red\")  # Evaluate the conditional density, distribution, quantile and regression # function at given values model$f_yx(y.smpl, x.new) #>  [1] 0.052973083 0.024542706 0.038582321 0.014103623 0.017757721 0.008522388 #>  [7] 0.008322539 0.015644532 0.016640188 0.002634610 0.007220426 model$F_yx(y.smpl, x.new) #>  [1] 0.4421942 0.6123485 0.1874575 0.6287227 0.4390344 0.6859078 0.6494552 #>  [8] 0.2586849 0.1238954 0.8474168 0.5438142 model$F1_yx(y.smpl, x.new) #> Warning: NaNs produced #>  [1] NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN y.pred <- model$mean_yx(x.new) points(x.new, y.pred, col=\"blue\")"},{"path":"https://gkremling.github.io/gofreg/reference/GLM.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized linear model (abstract class) ‚Äî GLM","title":"Generalized linear model (abstract class) ‚Äî GLM","text":"class specializes ParamRegrModel. abstract base class parametric generalized linear model objects specific distribution family NormalGLM handles (inverse) link function.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GLM.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Generalized linear model (abstract class) ‚Äî GLM","text":"gofreg::ParamRegrModel -> GLM","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GLM.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Generalized linear model (abstract class) ‚Äî GLM","text":"gofreg::ParamRegrModel$F1_yx() gofreg::ParamRegrModel$F_yx() gofreg::ParamRegrModel$f_yx() gofreg::ParamRegrModel$fit() gofreg::ParamRegrModel$get_params() gofreg::ParamRegrModel$sample_yx() gofreg::ParamRegrModel$set_params()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GLM.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Generalized linear model (abstract class) ‚Äî GLM","text":"GLM$new() GLM$mean_yx() GLM$clone()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GLM.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Generalized linear model (abstract class) ‚Äî GLM","text":"Initialize object class GLM.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GLM.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model (abstract class) ‚Äî GLM","text":"","code":"GLM$new(linkinv = identity, params = NA)"},{"path":"https://gkremling.github.io/gofreg/reference/GLM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model (abstract class) ‚Äî GLM","text":"linkinv inverse link function, defaults identity function params model parameters use default (optional)","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GLM.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Generalized linear model (abstract class) ‚Äî GLM","text":"new instance class","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GLM.html","id":"method-mean-yx-","dir":"Reference","previous_headings":"","what":"Method mean_yx()","title":"Generalized linear model (abstract class) ‚Äî GLM","text":"Evaluates regression function terms expected value Y given X=x.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GLM.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model (abstract class) ‚Äî GLM","text":"","code":"GLM$mean_yx(x, params = private$params)"},{"path":"https://gkremling.github.io/gofreg/reference/GLM.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model (abstract class) ‚Äî GLM","text":"x vector covariates params model parameters use, defaults fitted parameter values","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GLM.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Generalized linear model (abstract class) ‚Äî GLM","text":"value regression function","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GLM.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Generalized linear model (abstract class) ‚Äî GLM","text":"objects class cloneable method.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GLM.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model (abstract class) ‚Äî GLM","text":"","code":"GLM$clone(deep = FALSE)"},{"path":"https://gkremling.github.io/gofreg/reference/GLM.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model (abstract class) ‚Äî GLM","text":"deep Whether make deep clone.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GLM.new.html","id":null,"dir":"Reference","previous_headings":"","what":"Create GLM object with specific distribution family ‚Äî GLM.new","title":"Create GLM object with specific distribution family ‚Äî GLM.new","text":"constructor function can used create instance parametric GLM specific distribution family, returning new object NormalGLM, ExpGLM, WeibullGLM GammaGLM, depending value distr.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GLM.new.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create GLM object with specific distribution family ‚Äî GLM.new","text":"","code":"GLM.new(distr, linkinv = identity, params = NA)"},{"path":"https://gkremling.github.io/gofreg/reference/GLM.new.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create GLM object with specific distribution family ‚Äî GLM.new","text":"distr distribution family linkinv inverse link function, defaults identity function params model parameters use default (optional)","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GLM.new.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create GLM object with specific distribution family ‚Äî GLM.new","text":"new instance GLM-subclass","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GLM.new.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create GLM object with specific distribution family ‚Äî GLM.new","text":"","code":"model <- GLM.new(distr = \"normal\") # see examples of GLM-subclasses (e.g. NormalGLM) for how to use such models"},{"path":"https://gkremling.github.io/gofreg/reference/GOFTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Goodness-of-fit test for parametric regression ‚Äî GOFTest","title":"Goodness-of-fit test for parametric regression ‚Äî GOFTest","text":"class implements functions calculate test statistic original data well statistics bootstrap samples. also offers possibility compute corresponding bootstrap p-value.","code":""},{"path":[]},{"path":"https://gkremling.github.io/gofreg/reference/GOFTest.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Goodness-of-fit test for parametric regression ‚Äî GOFTest","text":"GOFTest$new() GOFTest$get_stat_orig() GOFTest$get_stats_boot() GOFTest$get_pvalue() GOFTest$plot_procs() GOFTest$clone()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GOFTest.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Goodness-of-fit test for parametric regression ‚Äî GOFTest","text":"Initialize instance class GOFTest.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GOFTest.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Goodness-of-fit test for parametric regression ‚Äî GOFTest","text":"","code":"GOFTest$new(   data,   model_fitted,   test_stat,   nboot,   resample = resample_param,   loglik = loglik_xy )"},{"path":"https://gkremling.github.io/gofreg/reference/GOFTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Goodness-of-fit test for parametric regression ‚Äî GOFTest","text":"data data.frame() containing data model_fitted object class ParamRegrModel fitted parameters test_stat object class TestStatistic nboot number bootstrap iterations resample function(data, model) used resample data bootstrap iterations, defaults resample_param() loglik function(data, model, params) negative log-likelihood function used fit model resampled data bootstrap iterations, defaults loglik_xy()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GOFTest.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Goodness-of-fit test for parametric regression ‚Äî GOFTest","text":"new instance class","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GOFTest.html","id":"method-get-stat-orig-","dir":"Reference","previous_headings":"","what":"Method get_stat_orig()","title":"Goodness-of-fit test for parametric regression ‚Äî GOFTest","text":"Calculates test statistic original data model.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GOFTest.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Goodness-of-fit test for parametric regression ‚Äî GOFTest","text":"","code":"GOFTest$get_stat_orig()"},{"path":"https://gkremling.github.io/gofreg/reference/GOFTest.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Goodness-of-fit test for parametric regression ‚Äî GOFTest","text":"object class TestStatistic","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GOFTest.html","id":"method-get-stats-boot-","dir":"Reference","previous_headings":"","what":"Method get_stats_boot()","title":"Goodness-of-fit test for parametric regression ‚Äî GOFTest","text":"Calculates test statistics resampled data corresponding models.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GOFTest.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Goodness-of-fit test for parametric regression ‚Äî GOFTest","text":"","code":"GOFTest$get_stats_boot()"},{"path":"https://gkremling.github.io/gofreg/reference/GOFTest.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Goodness-of-fit test for parametric regression ‚Äî GOFTest","text":"vector length nboot containing objects class TestStatistic","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GOFTest.html","id":"method-get-pvalue-","dir":"Reference","previous_headings":"","what":"Method get_pvalue()","title":"Goodness-of-fit test for parametric regression ‚Äî GOFTest","text":"Calculates bootstrap p-value given model.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GOFTest.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Goodness-of-fit test for parametric regression ‚Äî GOFTest","text":"","code":"GOFTest$get_pvalue()"},{"path":"https://gkremling.github.io/gofreg/reference/GOFTest.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Goodness-of-fit test for parametric regression ‚Äî GOFTest","text":"p-value null hypothesis y generated according model","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GOFTest.html","id":"method-plot-procs-","dir":"Reference","previous_headings":"","what":"Method plot_procs()","title":"Goodness-of-fit test for parametric regression ‚Äî GOFTest","text":"Plots processes underlying bootstrap test statistics (gray) original test statistic (red)","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GOFTest.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Goodness-of-fit test for parametric regression ‚Äî GOFTest","text":"","code":"GOFTest$plot_procs(   title = sprintf(\"Test Statistic: %s, p-value: %s\", class(private$test_stat)[1],     self$get_pvalue()),   subtitle = ggplot2::waiver(),   color_boot = \"gray40\",   color_orig = \"red\",   x_lab = \"plot.x\",   y_lab = \"plot.y\" )"},{"path":"https://gkremling.github.io/gofreg/reference/GOFTest.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Goodness-of-fit test for parametric regression ‚Äî GOFTest","text":"title text displayed title plot; defaults \"Test statistic: xxx, p-value: xxx\" subtitle text displayed subtitle plot; default subtitle color_boot color used plot bootstrap test statistics; default \"red\" color_orig color used plot original test statistic; default \"gray40\" x_lab label use x-axis; default \"plot.x\" y_lab label use y-axis; default \"plot.y\"","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GOFTest.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Goodness-of-fit test for parametric regression ‚Äî GOFTest","text":"object (self), allowing method chaining.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GOFTest.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Goodness-of-fit test for parametric regression ‚Äî GOFTest","text":"objects class cloneable method.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GOFTest.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Goodness-of-fit test for parametric regression ‚Äî GOFTest","text":"","code":"GOFTest$clone(deep = FALSE)"},{"path":"https://gkremling.github.io/gofreg/reference/GOFTest.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Goodness-of-fit test for parametric regression ‚Äî GOFTest","text":"deep Whether make deep clone.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GOFTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Goodness-of-fit test for parametric regression ‚Äî GOFTest","text":"","code":"# Create an example dataset n <- 100 x <- cbind(runif(n), rbinom(n, 1, 0.5)) model <- NormalGLM$new() y <- model$sample_yx(x, params=list(beta=c(2,3), sd=1)) data <- dplyr::tibble(x = x, y = y)  # Fit the correct model model$fit(data, params_init=list(beta=c(1,1), sd=3), inplace = TRUE)  # Calculate the bootstrap p-value and plot the corresponding processes goftest <- GOFTest$new(data, model, test_stat = CondKolmY$new(), nboot = 10) goftest$get_pvalue() #> [1] 0.6 goftest$plot_procs()   # Fit a wrong model model2 <- NormalGLM$new(linkinv = function(u) {u+10}) model2$fit(data, params_init=list(beta=c(1,1), sd=3), inplace = TRUE)  # Calculate the bootstrap p-value and plot the corresponding processes goftest2 <- GOFTest$new(data, model2, test_stat = CondKolmY$new(), nboot = 10) goftest2$get_pvalue() #> [1] 0 goftest2$plot_procs()"},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized linear model with gamma distribution ‚Äî GammaGLM","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"class represents generalized linear model Gamma distribution. inherits GLM implements functions , example, evaluate conditional density distribution functions.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"gofreg::ParamRegrModel -> gofreg::GLM -> GammaGLM","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"gofreg::ParamRegrModel$get_params() gofreg::ParamRegrModel$set_params() gofreg::GLM$initialize() gofreg::GLM$mean_yx()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"GammaGLM$fit() GammaGLM$f_yx() GammaGLM$F_yx() GammaGLM$F1_yx() GammaGLM$sample_yx() GammaGLM$clone()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":"method-fit-","dir":"Reference","previous_headings":"","what":"Method fit()","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"Calculates maximum likelihood estimator model parameters based given data.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"","code":"GammaGLM$fit(   data,   params_init = private$params,   loglik = loglik_xy,   inplace = FALSE )"},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"data tibble containing data fit model params_init initial value model parameters use optimization (defaults fitted parameter values) loglik function(data, model, params) defaults loglik_xy() inplace logical; TRUE, default model parameters set accordingly parameter estimator returned","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"MLE model parameters given data, shape params_init","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":"method-f-yx-","dir":"Reference","previous_headings":"","what":"Method f_yx()","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"Evaluates conditional density function.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"","code":"GammaGLM$f_yx(t, x, params = private$params)"},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"t value(s) conditional density shall evaluated x matrix covariates, row representing one sample params model parameters use (list() tags beta shape), defaults fitted parameter values","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"value(s) conditional density function, shape t","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":"method-f-yx--1","dir":"Reference","previous_headings":"","what":"Method F_yx()","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"Evaluates conditional distribution function.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"","code":"GammaGLM$F_yx(t, x, params = private$params)"},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"t value(s) conditional distribution shall evaluated x matrix covariates, row representing one sample params model parameters use (list() tags beta shape), defaults fitted parameter values","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"value(s) conditional distribution function,  shape t","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":"method-f-yx--2","dir":"Reference","previous_headings":"","what":"Method F1_yx()","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"Evaluates conditional quantile function.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"","code":"GammaGLM$F1_yx(t, x, params = private$params)"},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"t value(s) conditional quantile function shall evaluated x matrix covariates, row representing one sample params model parameters use (list() tags beta shape), defaults fitted parameter values","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"value(s) conditional quantile function, shape t","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":"method-sample-yx-","dir":"Reference","previous_headings":"","what":"Method sample_yx()","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"Generates new sample response variables conditional distribution.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"","code":"GammaGLM$sample_yx(x, params = private$params)"},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"x matrix covariates, row representing one sample params model parameters use (list() tags beta shape), defaults fitted parameter values","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"vector sampled response variables, length nrow(x)","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"objects class cloneable method.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"","code":"GammaGLM$clone(deep = FALSE)"},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"deep Whether make deep clone.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/GammaGLM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized linear model with gamma distribution ‚Äî GammaGLM","text":"","code":"# Use the built-in cars dataset x <- datasets::cars$speed y <- datasets::cars$dist data <- dplyr::tibble(x=x, y=y)  # Create an instance of GammaGLM model <- GammaGLM$new()  # Fit an Gamma GLM to the cars dataset model$fit(data, params_init = list(beta=3, shape=1), inplace=TRUE) params_opt <- model$get_params()  # Plot the resulting regression function plot(datasets::cars) abline(a = 0, b = params_opt$beta)  # Generate a sample for y for given x following the same distribution x.new <- seq(min(x), max(x), by=2) y.smpl <- model$sample_yx(x.new) points(x.new, y.smpl, col=\"red\")  # Evaluate the conditional density, distribution, quantile and regression # function at given values model$f_yx(y.smpl, x.new) #>  [1] 2.631940e-02 2.680607e-02 4.768020e-02 5.822071e-03 3.208479e-02 #>  [6] 9.263047e-03 7.369133e-03 1.690065e-02 1.896789e-02 1.613904e-02 #> [11] 2.219092e-05 model$F_yx(y.smpl, x.new) #>  [1] 0.91013645 0.04664996 0.32487047 0.95373608 0.38730096 0.88558751 #>  [7] 0.89760357 0.65364127 0.31196951 0.23359127 0.99966102 model$F1_yx(y.smpl, x.new) #> Warning: NaNs produced #>  [1] NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN y.pred <- model$mean_yx(x.new) points(x.new, y.pred, col=\"blue\")"},{"path":"https://gkremling.github.io/gofreg/reference/MEP.html","id":null,"dir":"Reference","previous_headings":"","what":"Marked empirical process test statistic for a given GLM ‚Äî MEP","title":"Marked empirical process test statistic for a given GLM ‚Äî MEP","text":"class inherits TestStatistic implements function calculate test statistic (x-y-values can used plot underlying process). process underlying test statistic given Dikta & Scheer (2021) doi:10.1007/978-3-030-73480-0  defined $$\\bar{R}^1_n(u)   = \\frac{1}{\\sqrt{n}} \\sum_{=1}^n \\left( Y_i - m(X_i, \\hat{\\beta}_n)   \\right) I_{\\{\\hat{\\beta}_n X_i \\le u\\}}, \\quad -\\infty \\le u \\le \\infty.$$","code":""},{"path":"https://gkremling.github.io/gofreg/reference/MEP.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Marked empirical process test statistic for a given GLM ‚Äî MEP","text":"gofreg::TestStatistic -> MEP","code":""},{"path":"https://gkremling.github.io/gofreg/reference/MEP.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Marked empirical process test statistic for a given GLM ‚Äî MEP","text":"gofreg::TestStatistic$geom_ts_proc() gofreg::TestStatistic$get_plot_xy() gofreg::TestStatistic$get_value() gofreg::TestStatistic$plot() gofreg::TestStatistic$print()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/MEP.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Marked empirical process test statistic for a given GLM ‚Äî MEP","text":"MEP$calc_stat() MEP$clone()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/MEP.html","id":"method-calc-stat-","dir":"Reference","previous_headings":"","what":"Method calc_stat()","title":"Marked empirical process test statistic for a given GLM ‚Äî MEP","text":"Calculate value test statistic given data model test .","code":""},{"path":"https://gkremling.github.io/gofreg/reference/MEP.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Marked empirical process test statistic for a given GLM ‚Äî MEP","text":"","code":"MEP$calc_stat(data, model)"},{"path":"https://gkremling.github.io/gofreg/reference/MEP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marked empirical process test statistic for a given GLM ‚Äî MEP","text":"data data.frame() columns x y containing data model ParamRegrModel test ","code":""},{"path":"https://gkremling.github.io/gofreg/reference/MEP.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Marked empirical process test statistic for a given GLM ‚Äî MEP","text":"modified object (self), allowing method chaining.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/MEP.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Marked empirical process test statistic for a given GLM ‚Äî MEP","text":"objects class cloneable method.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/MEP.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Marked empirical process test statistic for a given GLM ‚Äî MEP","text":"","code":"MEP$clone(deep = FALSE)"},{"path":"https://gkremling.github.io/gofreg/reference/MEP.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marked empirical process test statistic for a given GLM ‚Äî MEP","text":"deep Whether make deep clone.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/MEP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Marked empirical process test statistic for a given GLM ‚Äî MEP","text":"","code":"# Create an example dataset n <- 100 x <- cbind(runif(n), rbinom(n, 1, 0.5)) model <- NormalGLM$new() y <- model$sample_yx(x, params=list(beta=c(2,3), sd=1)) data <- dplyr::tibble(x = x, y = y)  # Fit the correct model model$fit(data, params_init=list(beta=c(1,1), sd=3), inplace = TRUE)  # Print value of test statistic and plot corresponding process ts <- MEP$new() ts$calc_stat(data, model) print(ts) #> Test statistic with value 0.4235113 plot(ts)   # Fit a wrong model model2 <- NormalGLM$new(linkinv = function(u) {u+10}) model2$fit(data, params_init=list(beta=c(1,1), sd=3), inplace = TRUE)  # Print value of test statistic and plot corresponding process ts2 <- MEP$new() ts2$calc_stat(data, model2) print(ts2) #> Test statistic with value 21.34835 plot(ts2)"},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"class represents generalized linear model negative binomial distribution. inherits GLM implements functions , example, evaluate conditional density distribution functions.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"gofreg::ParamRegrModel -> gofreg::GLM -> NegBinomGLM","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"gofreg::ParamRegrModel$get_params() gofreg::ParamRegrModel$set_params() gofreg::GLM$initialize() gofreg::GLM$mean_yx()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"NegBinomGLM$fit() NegBinomGLM$f_yx() NegBinomGLM$F_yx() NegBinomGLM$F1_yx() NegBinomGLM$sample_yx() NegBinomGLM$clone()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":"method-fit-","dir":"Reference","previous_headings":"","what":"Method fit()","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"Calculates maximum likelihood estimator model parameters based given data.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"","code":"NegBinomGLM$fit(   data,   params_init = private$params,   loglik = loglik_xy,   inplace = FALSE )"},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"data tibble containing data fit model params_init initial value model parameters use optimization (defaults fitted parameter values) loglik function(data, model, params) defaults loglik_xy() inplace logical; TRUE, default model parameters set accordingly parameter estimator returned","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"MLE model parameters given data, shape params_init","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":"method-f-yx-","dir":"Reference","previous_headings":"","what":"Method f_yx()","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"Evaluates conditional density function.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"","code":"NegBinomGLM$f_yx(t, x, params = private$params)"},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"t value(s) conditional density shall evaluated x matrix covariates, row representing one sample params model parameters use (list() tags beta shape), defaults fitted parameter values","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"value(s) conditional density function, shape t","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":"method-f-yx--1","dir":"Reference","previous_headings":"","what":"Method F_yx()","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"Evaluates conditional distribution function.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"","code":"NegBinomGLM$F_yx(t, x, params = private$params)"},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"t value(s) conditional distribution shall evaluated x matrix covariates, row representing one sample params model parameters use (list() tags beta shape), defaults fitted parameter values","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"value(s) conditional distribution function,  shape t","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":"method-f-yx--2","dir":"Reference","previous_headings":"","what":"Method F1_yx()","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"Evaluates conditional quantile function.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"","code":"NegBinomGLM$F1_yx(t, x, params = private$params)"},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"t value(s) conditional quantile function shall evaluated x matrix covariates, row representing one sample params model parameters use (list() tags beta shape), defaults fitted parameter values","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"value(s) conditional quantile function, shape t","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":"method-sample-yx-","dir":"Reference","previous_headings":"","what":"Method sample_yx()","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"Generates new sample response variables conditional distribution.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"","code":"NegBinomGLM$sample_yx(x, params = private$params)"},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"x matrix covariates, row representing one sample params model parameters use (list() tags beta shape), defaults fitted parameter values","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"vector sampled response variables, length nrow(x)","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"objects class cloneable method.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"","code":"NegBinomGLM$clone(deep = FALSE)"},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"deep Whether make deep clone.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NegBinomGLM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized linear model with negative binomial distribution ‚Äî NegBinomGLM","text":"","code":"# Use the built-in cars dataset x <- datasets::cars$speed y <- datasets::cars$dist data <- dplyr::tibble(x=x, y=y)  # Create an instance of a NegBinomGLM model <- NegBinomGLM$new()  # Fit a Negative Binomial GLM to the cars dataset model$fit(data, params_init = list(beta=3, shape=2), inplace=TRUE) params_opt <- model$get_params()  # Plot the resulting regression function plot(datasets::cars) abline(a = 0, b = params_opt$beta)  # Generate a sample for y for given x following the same distribution x.new <- seq(min(x), max(x), by=2) y.smpl <- model$sample_yx(x.new) points(x.new, y.smpl, col=\"red\")  # Evaluate the conditional density, distribution, quantile and regression # function at given values model$f_yx(y.smpl, x.new) #>  [1] 0.0004021967 0.0410103566 0.0469285237 0.0386686964 0.0215782557 #>  [6] 0.0059793562 0.0220477710 0.0217933831 0.0194777683 0.0065222626 #> [11] 0.0174339511 model$F_yx(y.smpl, x.new) #>  [1] 0.9991212 0.7653416 0.5079699 0.5018178 0.7711534 0.9438811 0.2167504 #>  [8] 0.2840711 0.5681305 0.8971193 0.3451189 model$F1_yx(y.smpl, x.new) #> Warning: NaNs produced #>  [1] NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN y.pred <- model$mean_yx(x.new) points(x.new, y.pred, col=\"blue\")"},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized linear model with normal distribution ‚Äî NormalGLM","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"class represents generalized linear model normal distribution. inherits GLM implements functions , example, evaluate conditional density distribution functions.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"gofreg::ParamRegrModel -> gofreg::GLM -> NormalGLM","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"gofreg::ParamRegrModel$get_params() gofreg::ParamRegrModel$set_params() gofreg::GLM$initialize() gofreg::GLM$mean_yx()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"NormalGLM$fit() NormalGLM$f_yx() NormalGLM$F_yx() NormalGLM$F1_yx() NormalGLM$sample_yx() NormalGLM$clone()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":"method-fit-","dir":"Reference","previous_headings":"","what":"Method fit()","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"Calculates maximum likelihood estimator model parameters based given data.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"","code":"NormalGLM$fit(   data,   params_init = private$params,   loglik = loglik_xy,   inplace = FALSE )"},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"data tibble containing data fit model params_init initial value model parameters use optimization (defaults fitted parameter values) loglik function(data, model, params) defaults loglik_xy() inplace logical; TRUE, default model parameters set accordingly parameter estimator returned","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"MLE model parameters given data, shape params_init","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":"method-f-yx-","dir":"Reference","previous_headings":"","what":"Method f_yx()","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"Evaluates conditional density function.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"","code":"NormalGLM$f_yx(t, x, params = private$params)"},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"t value(s) conditional density shall evaluated x matrix covariates, row representing one sample params model parameters use (list() tags beta sd), defaults fitted parameter values","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"value(s) conditional density function, shape t","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":"method-f-yx--1","dir":"Reference","previous_headings":"","what":"Method F_yx()","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"Evaluates conditional distribution function.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"","code":"NormalGLM$F_yx(t, x, params = private$params)"},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"t value(s) conditional distribution shall evaluated x matrix covariates, row representing one sample params model parameters use (list() tags beta sd), defaults fitted parameter values","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"value(s) conditional distribution function,  shape t","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":"method-f-yx--2","dir":"Reference","previous_headings":"","what":"Method F1_yx()","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"Evaluates conditional quantile function.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"","code":"NormalGLM$F1_yx(t, x, params = private$params)"},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"t value(s) conditional quantile function shall evaluated x matrix covariates, row representing one sample params model parameters use (list() tags beta sd), defaults fitted parameter values","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"value(s) conditional quantile function, shape t","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":"method-sample-yx-","dir":"Reference","previous_headings":"","what":"Method sample_yx()","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"Generates new sample response variables conditional distribution.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"","code":"NormalGLM$sample_yx(x, params = private$params)"},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"x matrix covariates, row representing one sample params model parameters use (list() tags beta sd), defaults fitted parameter values","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"vector sampled response variables, length nrow(x)","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"objects class cloneable method.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"","code":"NormalGLM$clone(deep = FALSE)"},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"deep Whether make deep clone.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/NormalGLM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized linear model with normal distribution ‚Äî NormalGLM","text":"","code":"# Use the built-in cars dataset x <- datasets::cars$speed y <- datasets::cars$dist data <- dplyr::tibble(x=x, y=y)  # Create an instance of a NormalGLM model <- NormalGLM$new()  # Fit a Normal GLM to the cars dataset model$fit(data, params_init = list(beta=3, sd=2), inplace=TRUE) params_opt <- model$get_params()  # Plot the resulting regression function plot(datasets::cars) abline(a = 0, b = params_opt$beta)  # Generate a sample for y for given x following the same distribution x.new <- seq(min(x), max(x), by=2) y.smpl <- model$sample_yx(x.new) points(x.new, y.smpl, col=\"red\")  # Evaluate the conditional density, distribution, quantile and regression # function at given values model$f_yx(y.smpl, x.new) #>  [1] 0.008360204 0.007838506 0.023665601 0.024645091 0.011708252 0.022415827 #>  [7] 0.021786365 0.023313391 0.018595291 0.023760691 0.024781343 model$F_yx(y.smpl, x.new) #>  [1] 0.92980773 0.06457848 0.61958855 0.54279090 0.11032669 0.67311101 #>  [7] 0.69429821 0.63691044 0.77583846 0.61444708 0.50911886 model$F1_yx(y.smpl, x.new) #> Warning: NaNs produced #>  [1] NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN y.pred <- model$mean_yx(x.new) points(x.new, y.pred, col=\"blue\")"},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"abstract base class parametric regression model objects like NormalGLM. Parametric regression models built around following key tasks: method fit() fit model given data, .e. compute MLE model parameters Methods f_yx(), F_yx() mean_yx() evaluate conditional density, distribution regression function method sample_yx() generate random sample response variables following model given vector covariates","code":""},{"path":[]},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"ParamRegrModel$set_params() ParamRegrModel$get_params() ParamRegrModel$fit() ParamRegrModel$f_yx() ParamRegrModel$F_yx() ParamRegrModel$F1_yx() ParamRegrModel$sample_yx() ParamRegrModel$mean_yx() ParamRegrModel$clone()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"method-set-params-","dir":"Reference","previous_headings":"","what":"Method set_params()","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"Set value model parameters used default class functions.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"","code":"ParamRegrModel$set_params(params)"},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"params model parameters use default","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"modified object (self), allowing method chaining.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"method-get-params-","dir":"Reference","previous_headings":"","what":"Method get_params()","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"Returns value model parameters used default class functions.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"","code":"ParamRegrModel$get_params()"},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"model parameters used default","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"method-fit-","dir":"Reference","previous_headings":"","what":"Method fit()","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"Calculates maximum likelihood estimator model parameters based given data.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"","code":"ParamRegrModel$fit(data, params_init = private$params, loglik = loglik_xy)"},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"data list containing data fit model params_init initial value model parameters use optimization (defaults fitted parameter values) loglik function(data, model, params) defaults loglik_xy()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"MLE model parameters given data, shape params_init","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"method-f-yx-","dir":"Reference","previous_headings":"","what":"Method f_yx()","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"Evaluates conditional density function.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"","code":"ParamRegrModel$f_yx(t, x, params = private$params)"},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"t value(s) conditional density shall evaluated x vector covariates params model parameters use, defaults fitted parameter values","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"value(s) conditional density function, shape t","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"method-f-yx--1","dir":"Reference","previous_headings":"","what":"Method F_yx()","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"Evaluates conditional distribution function.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"","code":"ParamRegrModel$F_yx(t, x, params = private$params)"},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"t value(s) conditional distribution shall evaluated x vector covariates params model parameters use, defaults fitted parameter values","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"value(s) conditional distribution function, shape t","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"method-f-yx--2","dir":"Reference","previous_headings":"","what":"Method F1_yx()","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"Evaluates conditional quantile function.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"","code":"ParamRegrModel$F1_yx(t, x, params = private$params)"},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"t value(s) conditional quantile function shall evaluated x vector covariates params model parameters use, defaults fitted parameter values","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"value(s) conditional quantile function, shape t","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"method-sample-yx-","dir":"Reference","previous_headings":"","what":"Method sample_yx()","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"Generates new sample response variables conditional distribution.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"","code":"ParamRegrModel$sample_yx(x, params = private$params)"},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"x vector covariates params model parameters use, defaults fitted parameter values","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"vector sampled response variables, length x","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"method-mean-yx-","dir":"Reference","previous_headings":"","what":"Method mean_yx()","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"Evaluates regression function terms expected value Y given X=x.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"","code":"ParamRegrModel$mean_yx(x, params = private$params)"},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"x vector covariates params model parameters use, defaults fitted parameter values","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"value regression function","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"objects class cloneable method.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"","code":"ParamRegrModel$clone(deep = FALSE)"},{"path":"https://gkremling.github.io/gofreg/reference/ParamRegrModel.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parametric regression model (abstract class) ‚Äî ParamRegrModel","text":"deep Whether make deep clone.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/SICM.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated integrated conditional moment test statistic ‚Äî SICM","title":"Simulated integrated conditional moment test statistic ‚Äî SICM","text":"class inherits TestStatistic implements function calculate test statistic (x-y-values can used plot underlying process). process underlying test statistic given Bierens & Wang (2012) doi:10.1017/S0266466611000168  defined $$\\hat{T}_n^{(s)}(c) = \\frac{1}{(2c)^{p+1}} \\int_{[-c,c]^p}   \\int_{-c}^c \\left|\\frac{1}{\\sqrt{n}} \\sum_{j=1}^n \\Big(\\exp(\\tau Y_j) -   \\exp(\\tau \\tilde{Y}_j)\\Big) \\exp(\\xi^T X_j)\\right|^2 d\\tau d\\xi $$","code":""},{"path":"https://gkremling.github.io/gofreg/reference/SICM.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Simulated integrated conditional moment test statistic ‚Äî SICM","text":"gofreg::TestStatistic -> SICM","code":""},{"path":"https://gkremling.github.io/gofreg/reference/SICM.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Simulated integrated conditional moment test statistic ‚Äî SICM","text":"gofreg::TestStatistic$geom_ts_proc() gofreg::TestStatistic$get_plot_xy() gofreg::TestStatistic$get_value() gofreg::TestStatistic$plot() gofreg::TestStatistic$print()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/SICM.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Simulated integrated conditional moment test statistic ‚Äî SICM","text":"SICM$new() SICM$calc_stat() SICM$clone()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/SICM.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Simulated integrated conditional moment test statistic ‚Äî SICM","text":"Initialize instance class SICM.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/SICM.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated integrated conditional moment test statistic ‚Äî SICM","text":"","code":"SICM$new(   c,   transx = function(values) {      tvals <- atan(scale(values))      tvals[,     apply(values, 2, sd) == 0] <- 0      return(tvals)  },   transy = function(values, data) {      array(atan(scale(values, center = mean(data$y),     scale = sd(data$y))))  } )"},{"path":"https://gkremling.github.io/gofreg/reference/SICM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulated integrated conditional moment test statistic ‚Äî SICM","text":"c chosen value integral boundaries (see Bierens & Wang (2012)) transx function(values) used transform x-values standardized bounded; default standardizatiin subtracting mean dividing standard deviation applying arctan transy function(values, data) used transform y-values standardized bounded (method used simulated y-values); default standardizatiin subtracting mean dividing standard deviation applying arctan","code":""},{"path":"https://gkremling.github.io/gofreg/reference/SICM.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Simulated integrated conditional moment test statistic ‚Äî SICM","text":"new instance class","code":""},{"path":"https://gkremling.github.io/gofreg/reference/SICM.html","id":"method-calc-stat-","dir":"Reference","previous_headings":"","what":"Method calc_stat()","title":"Simulated integrated conditional moment test statistic ‚Äî SICM","text":"Calculate value test statistic given data model test .","code":""},{"path":"https://gkremling.github.io/gofreg/reference/SICM.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated integrated conditional moment test statistic ‚Äî SICM","text":"","code":"SICM$calc_stat(data, model)"},{"path":"https://gkremling.github.io/gofreg/reference/SICM.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulated integrated conditional moment test statistic ‚Äî SICM","text":"data data.frame() columns x y containing data model ParamRegrModel test ","code":""},{"path":"https://gkremling.github.io/gofreg/reference/SICM.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Simulated integrated conditional moment test statistic ‚Äî SICM","text":"modified object (self), allowing method chaining.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/SICM.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Simulated integrated conditional moment test statistic ‚Äî SICM","text":"objects class cloneable method.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/SICM.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated integrated conditional moment test statistic ‚Äî SICM","text":"","code":"SICM$clone(deep = FALSE)"},{"path":"https://gkremling.github.io/gofreg/reference/SICM.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulated integrated conditional moment test statistic ‚Äî SICM","text":"deep Whether make deep clone.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/SICM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulated integrated conditional moment test statistic ‚Äî SICM","text":"","code":"# Create an example dataset n <- 100 x <- cbind(runif(n), rbinom(n, 1, 0.5)) model <- NormalGLM$new() y <- model$sample_yx(x, params=list(beta=c(2,3), sd=1)) data <- dplyr::tibble(x = x, y = y)  # Fit the correct model model$fit(data, params_init=list(beta=c(1,1), sd=3), inplace = TRUE)  # Print value of test statistic and plot corresponding process ts <- SICM$new(c = 5) ts$calc_stat(data, model) print(ts) #> Test statistic with value 0.4004599 plot(ts) #> `geom_line()`: Each group consists of only one observation. #> ‚Ñπ Do you need to adjust the group aesthetic?   # Fit a wrong model model2 <- NormalGLM$new(linkinv = function(u) {u+10}) model2$fit(data, params_init=list(beta=c(1,1), sd=3), inplace = TRUE)  # Print value of test statistic and plot corresponding process ts2 <- SICM$new(c = 5) ts2$calc_stat(data, model2) print(ts2) #> Test statistic with value 10.79171 plot(ts2) #> `geom_line()`: Each group consists of only one observation. #> ‚Ñπ Do you need to adjust the group aesthetic?"},{"path":"https://gkremling.github.io/gofreg/reference/TestStatistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Statistic for parametric regression models (abstract class) ‚Äî TestStatistic","title":"Test Statistic for parametric regression models (abstract class) ‚Äî TestStatistic","text":"abstract base class test statistic objects like CondKolmY MEP. Test statistics built around key method calc_stat() calculates particular test statistic (x-y-values can used plot underlying process).","code":""},{"path":[]},{"path":"https://gkremling.github.io/gofreg/reference/TestStatistic.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Test Statistic for parametric regression models (abstract class) ‚Äî TestStatistic","text":"TestStatistic$get_value() TestStatistic$calc_stat() TestStatistic$get_plot_xy() TestStatistic$print() TestStatistic$geom_ts_proc() TestStatistic$plot() TestStatistic$clone()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/TestStatistic.html","id":"method-get-value-","dir":"Reference","previous_headings":"","what":"Method get_value()","title":"Test Statistic for parametric regression models (abstract class) ‚Äî TestStatistic","text":"Returns value test statistic.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/TestStatistic.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Statistic for parametric regression models (abstract class) ‚Äî TestStatistic","text":"","code":"TestStatistic$get_value()"},{"path":"https://gkremling.github.io/gofreg/reference/TestStatistic.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Test Statistic for parametric regression models (abstract class) ‚Äî TestStatistic","text":"value test statistic","code":""},{"path":"https://gkremling.github.io/gofreg/reference/TestStatistic.html","id":"method-calc-stat-","dir":"Reference","previous_headings":"","what":"Method calc_stat()","title":"Test Statistic for parametric regression models (abstract class) ‚Äî TestStatistic","text":"Calculate value test statistic given data model test .","code":""},{"path":"https://gkremling.github.io/gofreg/reference/TestStatistic.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Statistic for parametric regression models (abstract class) ‚Äî TestStatistic","text":"","code":"TestStatistic$calc_stat(data, model)"},{"path":"https://gkremling.github.io/gofreg/reference/TestStatistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Statistic for parametric regression models (abstract class) ‚Äî TestStatistic","text":"data list() containing data model ParamRegrModel test ","code":""},{"path":"https://gkremling.github.io/gofreg/reference/TestStatistic.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Test Statistic for parametric regression models (abstract class) ‚Äî TestStatistic","text":"modified object (self), allowing method chaining.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/TestStatistic.html","id":"method-get-plot-xy-","dir":"Reference","previous_headings":"","what":"Method get_plot_xy()","title":"Test Statistic for parametric regression models (abstract class) ‚Äî TestStatistic","text":"Returns vectors x y can used plot process corresponding test statistic.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/TestStatistic.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Statistic for parametric regression models (abstract class) ‚Äî TestStatistic","text":"","code":"TestStatistic$get_plot_xy()"},{"path":"https://gkremling.github.io/gofreg/reference/TestStatistic.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Test Statistic for parametric regression models (abstract class) ‚Äî TestStatistic","text":"list plot.x plot.y vectors length","code":""},{"path":"https://gkremling.github.io/gofreg/reference/TestStatistic.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Test Statistic for parametric regression models (abstract class) ‚Äî TestStatistic","text":"Overrides print-method objects type TestStatistic print value.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/TestStatistic.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Statistic for parametric regression models (abstract class) ‚Äî TestStatistic","text":"","code":"TestStatistic$print()"},{"path":"https://gkremling.github.io/gofreg/reference/TestStatistic.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Test Statistic for parametric regression models (abstract class) ‚Äî TestStatistic","text":"object (self), allowing method chaining.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/TestStatistic.html","id":"method-geom-ts-proc-","dir":"Reference","previous_headings":"","what":"Method geom_ts_proc()","title":"Test Statistic for parametric regression models (abstract class) ‚Äî TestStatistic","text":"Creates line plot showing underlying process test statistic.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/TestStatistic.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Statistic for parametric regression models (abstract class) ‚Äî TestStatistic","text":"","code":"TestStatistic$geom_ts_proc(...)"},{"path":"https://gkremling.github.io/gofreg/reference/TestStatistic.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Statistic for parametric regression models (abstract class) ‚Äî TestStatistic","text":"... arguments passed ggplot2::geom_line(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/TestStatistic.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Test Statistic for parametric regression models (abstract class) ‚Äî TestStatistic","text":"ggplot2 layer representing line plot.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/TestStatistic.html","id":"method-plot-","dir":"Reference","previous_headings":"","what":"Method plot()","title":"Test Statistic for parametric regression models (abstract class) ‚Äî TestStatistic","text":"Creates new ggplot showing underlying process test statistic.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/TestStatistic.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Statistic for parametric regression models (abstract class) ‚Äî TestStatistic","text":"","code":"TestStatistic$plot(...)"},{"path":"https://gkremling.github.io/gofreg/reference/TestStatistic.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Statistic for parametric regression models (abstract class) ‚Äî TestStatistic","text":"... arguments passed ggplot2::geom_line(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/TestStatistic.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Test Statistic for parametric regression models (abstract class) ‚Äî TestStatistic","text":"ggplot2 object representing complete plot, including line geometry.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/TestStatistic.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Test Statistic for parametric regression models (abstract class) ‚Äî TestStatistic","text":"objects class cloneable method.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/TestStatistic.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Statistic for parametric regression models (abstract class) ‚Äî TestStatistic","text":"","code":"TestStatistic$clone(deep = FALSE)"},{"path":"https://gkremling.github.io/gofreg/reference/TestStatistic.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test Statistic for parametric regression models (abstract class) ‚Äî TestStatistic","text":"deep Whether make deep clone.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"class represents generalized linear model Weibull distribution. inherits GLM implements functions , example, evaluate conditional density distribution functions.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"gofreg::ParamRegrModel -> gofreg::GLM -> WeibullGLM","code":""},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"gofreg::ParamRegrModel$get_params() gofreg::ParamRegrModel$set_params() gofreg::GLM$initialize() gofreg::GLM$mean_yx()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"WeibullGLM$fit() WeibullGLM$f_yx() WeibullGLM$F_yx() WeibullGLM$F1_yx() WeibullGLM$sample_yx() WeibullGLM$clone()","code":""},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":"method-fit-","dir":"Reference","previous_headings":"","what":"Method fit()","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"Calculates maximum likelihood estimator model parameters based given data.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"","code":"WeibullGLM$fit(   data,   params_init = private$params,   loglik = loglik_xy,   inplace = FALSE )"},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"data tibble containing data fit model params_init initial value model parameters use optimization (defaults fitted parameter values) loglik function(data, model, params) defaults loglik_xy() inplace logical; TRUE, default model parameters set accordingly parameter estimator returned","code":""},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"MLE model parameters given data, shape params_init","code":""},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":"method-f-yx-","dir":"Reference","previous_headings":"","what":"Method f_yx()","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"Evaluates conditional density function.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"","code":"WeibullGLM$f_yx(t, x, params = private$params)"},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"t value(s) conditional density shall evaluated x matrix covariates, row representing one sample params model parameters use (list() tags beta shape), defaults fitted parameter values","code":""},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"value(s) conditional density function, shape t","code":""},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":"method-f-yx--1","dir":"Reference","previous_headings":"","what":"Method F_yx()","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"Evaluates conditional distribution function.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"","code":"WeibullGLM$F_yx(t, x, params = private$params)"},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"t value(s) conditional distribution shall evaluated x matrix covariates, row representing one sample params model parameters use (list() tags beta shape), defaults fitted parameter values","code":""},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"value(s) conditional distribution function,  shape t","code":""},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":"method-f-yx--2","dir":"Reference","previous_headings":"","what":"Method F1_yx()","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"Evaluates conditional quantile function.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"","code":"WeibullGLM$F1_yx(t, x, params = private$params)"},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"t value(s) conditional quantile function shall evaluated x matrix covariates, row representing one sample params model parameters use (list() tags beta shape), defaults fitted parameter values","code":""},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"value(s) conditional quantile function, shape t","code":""},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":"method-sample-yx-","dir":"Reference","previous_headings":"","what":"Method sample_yx()","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"Generates new sample response variables conditional distribution.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"","code":"WeibullGLM$sample_yx(x, params = private$params)"},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"x matrix covariates, row representing one sample params model parameters use (list() tags beta shape), defaults fitted parameter values","code":""},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"vector sampled response variables, length nrow(x)","code":""},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"objects class cloneable method.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"","code":"WeibullGLM$clone(deep = FALSE)"},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"deep Whether make deep clone.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/WeibullGLM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized linear model with Weibull distribution ‚Äî WeibullGLM","text":"","code":"# Use the built-in cars dataset x <- datasets::cars$speed y <- datasets::cars$dist data <- dplyr::tibble(x=x, y=y)  # Create an instance of WeibullGLM model <- WeibullGLM$new()  # Fit an Weibull GLM to the cars dataset model$fit(data, params_init = list(beta=3, shape=1), inplace=TRUE) params_opt <- model$get_params()  # Plot the resulting regression function plot(datasets::cars) abline(a = 0, b = params_opt$beta)  # Generate a sample for y for given x following the same distribution x.new <- seq(min(x), max(x), by=2) y.smpl <- model$sample_yx(x.new) points(x.new, y.smpl, col=\"red\")  # Evaluate the conditional density, distribution, quantile and regression # function at given values model$f_yx(y.smpl, x.new) #>  [1] 0.071377698 0.046761017 0.032743407 0.030290833 0.028572667 0.013864323 #>  [7] 0.020106339 0.008204561 0.014264992 0.016203250 0.013408976 model$F_yx(y.smpl, x.new) #>  [1] 0.72844204 0.19926649 0.17174180 0.23866253 0.34709698 0.85553570 #>  [7] 0.64995758 0.05917611 0.72882497 0.45889552 0.64965350 model$F1_yx(y.smpl, x.new) #> Warning: NaNs produced #>  [1] NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN y.pred <- model$mean_yx(x.new) points(x.new, y.pred, col=\"blue\")"},{"path":"https://gkremling.github.io/gofreg/reference/loglik_xy.html","id":null,"dir":"Reference","previous_headings":"","what":"Negative log-likelihood function for a parametric regression model ‚Äî loglik_xy","title":"Negative log-likelihood function for a parametric regression model ‚Äî loglik_xy","text":"log-likelihood function parametric regression model data (x,y) given sum logarithm conditional density Y given X=x evaluated y. function one option can used fit ParamRegrModel. returns negative log-likelihood value order optim() maximize (instead minimize).","code":""},{"path":"https://gkremling.github.io/gofreg/reference/loglik_xy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Negative log-likelihood function for a parametric regression model ‚Äî loglik_xy","text":"","code":"loglik_xy(data, model, params)"},{"path":"https://gkremling.github.io/gofreg/reference/loglik_xy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Negative log-likelihood function for a parametric regression model ‚Äî loglik_xy","text":"data list() tags x y containing data model ParamRegrModel use likelihood function params vector model parameters compute likelihood function ","code":""},{"path":"https://gkremling.github.io/gofreg/reference/loglik_xy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Negative log-likelihood function for a parametric regression model ‚Äî loglik_xy","text":"Value negative log-likelihood function","code":""},{"path":"https://gkremling.github.io/gofreg/reference/loglik_xy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Negative log-likelihood function for a parametric regression model ‚Äî loglik_xy","text":"","code":"# Create an example dataset n <- 100 x <- cbind(runif(n), rbinom(n, 1, 0.5)) model <- NormalGLM$new() params.true <- list(beta = c(2,3), sd = 1) y <- model$sample_yx(x, params = params.true) data <- dplyr::tibble(x = x, y = y)  # Compute negative log likelihood for true parameters loglik_xy(data, model, params.true) #> [1] 137.3432  # Compute negative log likelihood for wrong parameters (should be higher) loglik_xy(data, model, params = list(beta = c(1,2), sd = 0.5)) #> [1] 526.0105"},{"path":"https://gkremling.github.io/gofreg/reference/loglik_xzd.html","id":null,"dir":"Reference","previous_headings":"","what":"Negative log-likelihood function for a parametric regression model under random censorship ‚Äî loglik_xzd","title":"Negative log-likelihood function for a parametric regression model under random censorship ‚Äî loglik_xzd","text":"log-likelihood function parametric regression model random censorship data (x,z,delta) given sum logarithm conditional density Y given X=x evaluated z z uncensored logarithm conditional survival Y given X=x evaluated z z censored. function one option can used fit ParamRegrModel. returns negative log-likelihood value order optim() maximize (instead minimize).","code":""},{"path":"https://gkremling.github.io/gofreg/reference/loglik_xzd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Negative log-likelihood function for a parametric regression model under random censorship ‚Äî loglik_xzd","text":"","code":"loglik_xzd(data, model, params)"},{"path":"https://gkremling.github.io/gofreg/reference/loglik_xzd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Negative log-likelihood function for a parametric regression model under random censorship ‚Äî loglik_xzd","text":"data list() tags x, z delta containing data model ParamRegrModel use likelihood function params vector model parameters compute likelihood function ","code":""},{"path":"https://gkremling.github.io/gofreg/reference/loglik_xzd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Negative log-likelihood function for a parametric regression model under random censorship ‚Äî loglik_xzd","text":"Value negative log-likelihood function","code":""},{"path":"https://gkremling.github.io/gofreg/reference/loglik_xzd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Negative log-likelihood function for a parametric regression model under random censorship ‚Äî loglik_xzd","text":"","code":"# Create an example dataset n <- 100 x <- cbind(runif(n), rbinom(n, 1, 0.5)) model <- NormalGLM$new() params.true <- list(beta = c(2,3), sd = 1) y <- model$sample_yx(x, params = params.true) c <- rnorm(n, mean(y) * 1.2, sd(y) * 0.5) data <- dplyr::tibble(x = x, z = pmin(y, c), delta = as.numeric(y <= c))  # Compute negative log likelihood for true parameters loglik_xzd(data, model, params.true) #> [1] 95.71994  # Compute negative log likelihood for wrong parameters (should be higher) loglik_xzd(data, model, params = list(beta = c(1,2), sd = 0.5)) #> [1] 306.0526"},{"path":"https://gkremling.github.io/gofreg/reference/resample_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Parametric resampling scheme for a paramatric regression model ‚Äî resample_param","title":"Parametric resampling scheme for a paramatric regression model ‚Äî resample_param","text":"Generate new, resampled dataset shape data following given model. covariates kept response variables drawn according model$sample_yx().","code":""},{"path":"https://gkremling.github.io/gofreg/reference/resample_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parametric resampling scheme for a paramatric regression model ‚Äî resample_param","text":"","code":"resample_param(data, model)"},{"path":"https://gkremling.github.io/gofreg/reference/resample_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parametric resampling scheme for a paramatric regression model ‚Äî resample_param","text":"data data.frame() columns x y containing original data model ParamRegrModel use resampling","code":""},{"path":"https://gkremling.github.io/gofreg/reference/resample_param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parametric resampling scheme for a paramatric regression model ‚Äî resample_param","text":"data.frame() columns x y containing resampled data","code":""},{"path":"https://gkremling.github.io/gofreg/reference/resample_param.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parametric resampling scheme for a paramatric regression model ‚Äî resample_param","text":"","code":"# Create an example dataset n <- 10 x <- cbind(runif(n), rbinom(n, 1, 0.5)) model <- NormalGLM$new() params <- list(beta = c(2, 3), sd = 1) y <- model$sample_yx(x, params = params) data <- dplyr::tibble(x = x, y = y)  # Fit the model to the data model$fit(data, params_init = params, inplace = TRUE)  # Resample from the model given data resample_param(data, model) #> # A tibble: 10 √ó 2 #>     x[,1]  [,2]      y #>     <dbl> <dbl>  <dbl> #>  1 0.0277     0  0.319 #>  2 0.980      1  4.73  #>  3 0.244      0  0.293 #>  4 0.720      1  5.06  #>  5 0.621      0  1.20  #>  6 0.236      1  5.09  #>  7 0.0347     0 -0.590 #>  8 0.624      1  3.80  #>  9 0.275      0  0.501 #> 10 0.566      0 -0.867"},{"path":"https://gkremling.github.io/gofreg/reference/resample_param_cens.html","id":null,"dir":"Reference","previous_headings":"","what":"Parametric resampling scheme for a paramatric regression model under random censorship ‚Äî resample_param_cens","title":"Parametric resampling scheme for a paramatric regression model under random censorship ‚Äî resample_param_cens","text":"Generate new, resampled dataset shape data following given model. covariates X kept . Survival times Y drawn according model$sample_yx() censoring times C according KM estimator.","code":""},{"path":"https://gkremling.github.io/gofreg/reference/resample_param_cens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parametric resampling scheme for a paramatric regression model under random censorship ‚Äî resample_param_cens","text":"","code":"resample_param_cens(data, model)"},{"path":"https://gkremling.github.io/gofreg/reference/resample_param_cens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parametric resampling scheme for a paramatric regression model under random censorship ‚Äî resample_param_cens","text":"data data.frame() columns x, z delta containing original data model ParamRegrModel use resampling","code":""},{"path":"https://gkremling.github.io/gofreg/reference/resample_param_cens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parametric resampling scheme for a paramatric regression model under random censorship ‚Äî resample_param_cens","text":"data.frame() columns x, z delta containing resampled data","code":""},{"path":"https://gkremling.github.io/gofreg/reference/resample_param_cens.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parametric resampling scheme for a paramatric regression model under random censorship ‚Äî resample_param_cens","text":"","code":"# Create an example dataset n <- 10 x <- cbind(runif(n), rbinom(n, 1, 0.5)) model <- NormalGLM$new() params <- list(beta = c(2, 3), sd = 1) y <- model$sample_yx(x, params = params) c <- rnorm(n, mean(y) * 1.2, sd(y) * 0.5) z <- pmin(y, c) delta <- as.numeric(y <= c) data <- dplyr::tibble(x = x, z = z, delta = delta)  # Fit the model to the data model$fit(data, params_init = params, inplace = TRUE, loglik = loglik_xzd)  # Resample from the model given data resample_param_cens(data, model) #> # A tibble: 10 √ó 3 #>     x[,1]  [,2]      z delta #>     <dbl> <dbl>  <dbl> <dbl> #>  1 0.0979     0 -0.111     1 #>  2 0.700      0  0.642     1 #>  3 0.214      1  1.33      1 #>  4 0.277      1  1.74      0 #>  5 0.747      1  3.46      0 #>  6 0.118      1  2.83      1 #>  7 0.296      0  1.18      1 #>  8 0.885      0  1.31      1 #>  9 0.0982     1  2.85      0 #> 10 0.182      1  1.76      0"},{"path":"https://gkremling.github.io/gofreg/reference/resample_param_rsmplx.html","id":null,"dir":"Reference","previous_headings":"","what":"Parametric resampling scheme for a paramatric regression model with resampling of covariates ‚Äî resample_param_rsmplx","title":"Parametric resampling scheme for a paramatric regression model with resampling of covariates ‚Äî resample_param_rsmplx","text":"Generate new, resampled dataset shape data following given model. covariates resampled data$x response variables drawn according model$sample_yx().","code":""},{"path":"https://gkremling.github.io/gofreg/reference/resample_param_rsmplx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parametric resampling scheme for a paramatric regression model with resampling of covariates ‚Äî resample_param_rsmplx","text":"","code":"resample_param_rsmplx(data, model)"},{"path":"https://gkremling.github.io/gofreg/reference/resample_param_rsmplx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parametric resampling scheme for a paramatric regression model with resampling of covariates ‚Äî resample_param_rsmplx","text":"data data.frame() columns x y containing original data model ParamRegrModel use resampling","code":""},{"path":"https://gkremling.github.io/gofreg/reference/resample_param_rsmplx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parametric resampling scheme for a paramatric regression model with resampling of covariates ‚Äî resample_param_rsmplx","text":"data.frame() columns x y containing resampled data","code":""},{"path":"https://gkremling.github.io/gofreg/reference/resample_param_rsmplx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parametric resampling scheme for a paramatric regression model with resampling of covariates ‚Äî resample_param_rsmplx","text":"","code":"# Create an example dataset n <- 10 x <- cbind(runif(n), rbinom(n, 1, 0.5)) model <- NormalGLM$new() params <- list(beta = c(2, 3), sd = 1) y <- model$sample_yx(x, params = params) data <- dplyr::tibble(x = x, y = y)  # Fit the model to the data model$fit(data, params_init = params, inplace = TRUE)  # Resample from the model given data resample_param(data, model) #> # A tibble: 10 √ó 2 #>    x[,1]  [,2]       y #>    <dbl> <dbl>   <dbl> #>  1 0.554     1  4.16   #>  2 0.303     0  0.321  #>  3 0.446     0  0.0683 #>  4 0.315     1  3.52   #>  5 0.142     1  3.33   #>  6 0.491     1  4.27   #>  7 0.650     1  5.11   #>  8 0.407     1  3.99   #>  9 0.755     0  0.645  #> 10 0.483     0 -0.836"},{"path":"https://gkremling.github.io/gofreg/news/index.html","id":"gofreg-100","dir":"Changelog","previous_headings":"","what":"gofreg 1.0.0","title":"gofreg 1.0.0","text":"Initial CRAN submission.","code":""}]
